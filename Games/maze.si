/*
A maze game
迷宫游戏 v1.0
根据C++语言源代码改编成Silk语言
原C++语言参考地址：https://blog.csdn.net/weixin_43675051/article/details/85262289，感谢原作者。
*/

MAX_X = 20;
MAX_Y = 30;
flag = false;
slow = false;
autogame = true;
maze = null;		//迷宫

class Stack()
{
	self.Data=[];
	
    func empty()
	{
		return (self.Data.size() == 0);
	}

	func push(x,y,d)
	{
		data=[x,y,d];
		self.Data.append(data);
	}
    
	func pop()
	{
		if(self.empty())
		{
			return null;
		}
        top=self.Data.size()-1;
		data = self.Data[top];
		self.Data.erase(top);

		return data;
	}
}

func get_curdir()
{
	curdir=_fun("curdir");
	if(curdir.size()==0)
		curdir="./";
	return curdir;
}
//=====>以下函数涉及Windows内部函数，通过调用C/C++语言编写的Dll实现
func getchar()
{
	ret=null;
 	curdir=get_curdir();
    filename=curdir+"SilkCommonLib64.dll";
	if(_fun("os_platform").find("x64")<0)
		filename=curdir+"SilkCommonLib.dll";//win32
	lib=_loadlib(filename);
	if(lib)
    {
		ret=_calllib(lib,"get_char");
        if(ret)
        {
			if(ret[0]==224)//如果是方向键，先返回224，然后再取真正的键值
				ret=_calllib(lib,"get_char");
			ret=ret[0];
        }
    }
	_freelib(lib);
	return ret;
}
func gotoxy(x, y){

 	curdir=get_curdir();
    filename=curdir+"SilkCommonLib64.dll";
	if(_fun("os_platform").find("x64")<0)
		filename=curdir+"SilkCommonLib.dll";//win32
	lib=_loadlib(filename);
	if(lib)
    {
		_calllib(lib,"set_console_pos",x,y);
        _calllib(lib,"hide_console_cursor");
	}
	_freelib(lib);
}
//<==================

//创建迷宫
func createMaze(){
	global maze;
    
    maze=[];
    maze.create2d(MAX_X , MAX_Y, 1);//创建MAX_X*MAX_Y大小二维数组，用1填充
    
	maxway = MAX_X * MAX_Y;		//最大通路

	for(i=0;i<maxway;i++)		//随机构建迷宫通路
	{
		x = _fun("time_rand") % (MAX_X-2) + 1;
		y = _fun("time_rand") % (MAX_Y-2) + 1;
		maze[x][y] = 0;
	}	

	maze[1][1] = 0; 				//入口
	maze[MAX_X-2][MAX_Y-2] = 0;		//出口

	maze[0][1] = 3;
 	maze[MAX_X-1][MAX_Y-2] = 0;
}

//输出迷宫
func printMaze(){
	//_fun("system","cls");
    gotoxy(0,0);
	for(x=0;x<MAX_X;x++)
	{
		for(y=0;y<MAX_Y;y++)
		{
			if(maze[x][y]==0){printf("  ");continue;}		//通路
			if(maze[x][y]==1){printf("■");continue;}		//墙
			if(maze[x][y]==2){printf("×");continue;}		//死胡同
			if(maze[x][y]==3){printf("↓");continue;}		//向下走
			if(maze[x][y]==4){printf("→");continue;}
			if(maze[x][y]==5){printf("←");continue;}
			if(maze[x][y]==6){printf("↑");continue;}
			if(maze[x][y]==7){printf("※");continue;}		//当前站立位置
		}
		printf("\n");
	}
	if(slow){
		_fun("time_sleep",1);											//延时函数
	}
}
func check(s){
	global flag;
    
    temp=_copy(maze);

	x=1;y=1;					//出发点	
	while(1){
		temp[x][y] = 2;

		//向下
		if(temp[x+1][y]==0){
			s.push(x,y,"D");
			temp[x][y] = 3;			//在当前位置做一个向下的标志
			x = x + 1;
			temp[x][y] = 7;			//当前位置
			if((x==MAX_X-1)&&(y==MAX_Y-2)){
				flag = true;
				return;
			}
			else
				continue;
		}

		//向右
		if(temp[x][y+1]==0){
			s.push(x,y,"R");
			temp[x][y] = 4;			//在当前位置做一个向右的标志
			y = y + 1;
			temp[x][y] = 7;
			if((x==MAX_X-1)&&(y==MAX_Y-2)){
				flag = true;
				return;
			}
			else
				continue;
		}

		//向上
		if(temp[x-1][y]==0){
			s.push(x,y,"U");
			temp[x][y] = 6;			//在当前位置做一个向上的标志
			x = x - 1;
			temp[x][y] = 7;
			if((x==MAX_X-1)&&(y==MAX_Y-2)){
				flag = true;
				return;
			}
			else
				continue;
		}

		//向左
		if(temp[x][y-1]==0){
			s.push(x,y,"L");
			temp[x][y] = 5;			//在当前位置做一个向右的标志
			y = y - 1;
			temp[x][y] = 7;
			if((x==MAX_X-1)&&(y==MAX_Y-2)){
				flag = true;
				return;
			}
			else
				continue;
		}

		//上下左右不通，则回退
        data=s.pop();
        if(data)
        {
			x=data[0];
            y=data[1];
        }
		if(s.empty() && temp[x-1][y]!=0 && temp[x][y-1]!=0 && temp[x][y+1]!=0 && temp[x+1][y]!=0){
			temp[0][1] = 7;
			if(temp[1][1]!=1)
				temp[1][1] = 2;
			return;
		}
	}
}
func autoMove(s){
	x=1;y=1;					//出发点	
	while(1){
		maze[x][y] = 2;

		//向下
		if(maze[x+1][y]==0){
			s.push(x,y,"D");
			maze[x][y] = 3;			//在当前位置做一个向下的标志
			x = x + 1;
			maze[x][y] = 7;			//当前位置
			if(slow)
				printMaze();
			if((x==MAX_X-1)&&(y==MAX_Y-2)){
				s.push(x,y,"*");
				print("\n\n              成功走出");
				return 1;
			}
			else
				continue;
		}

		//向右
		if(maze[x][y+1]==0){
			s.push(x,y,"R");
			maze[x][y] = 4;			//在当前位置做一个向右的标志
			y = y + 1;
			maze[x][y] = 7;
			if(slow)
				printMaze();
			if((x==MAX_X-1)&&(y==MAX_Y-2)){
				s.push(x,y,"*");
				print("\n\n              成功走出");
				return 1;
			}
			else
				continue;
		}

		//向上
		if(maze[x-1][y]==0){
			s.push(x,y,"U");
			maze[x][y] = 6;			//在当前位置做一个向上的标志
			x = x - 1;
			maze[x][y] = 7;
			if(slow)
				printMaze();
			if((x==MAX_X-1)&&(y==MAX_Y-2)){
				s.push(x,y,"*");
				print("\n\n              成功走出");
				return 1;
			}
			else
				continue;
		}

		//向左
		if(maze[x][y-1]==0){
			s.push(x,y,"L");
			maze[x][y] = 5;			//在当前位置做一个向右的标志
			y = y - 1;
			maze[x][y] = 7;
			if(slow)
				printMaze();
			if((x==MAX_X-1)&&(y==MAX_Y-2)){
				s.push(x,y,"*");
				print("\n\n              成功走出");
				return 1;
			}
			else
				continue;
		}

		//上下左右不通，则回退
        data=s.pop();
        if(data)
        {
			x=data[0];
            y=data[1];
        }
		if(s.empty() && maze[x-1][y]!=0 && maze[x][y-1]!=0 && maze[x][y+1]!=0 && maze[x+1][y]!=0){
			print("\n\n              没有找到合适的路径");
			maze[0][1] = 7;
			if(maze[1][1]!=1)
				maze[1][1] = 2;
			return 0;
		}
	}
}

func move(){
	x=1;y=1;					//出发点	
	while(1){
		key=getchar();
		if(key == 80){//down
				if(maze[x+1][y]==0){
					maze[x][y] = 0;
					x = x + 1;
					maze[x][y] = 7;			//当前位置
					printMaze();
					if((x==MAX_X-1)&&(y==MAX_Y-2)){
						print("\n\n              成功走出");
						return;
					}
				}				
        }
		if(key == 77){//right
				if(maze[x][y+1]==0){
					if(maze[x][y+1]==0){
						maze[x][y] = 0;
						y = y + 1;
						maze[x][y] = 7;
						printMaze();
						if((x==MAX_X-1)&&(y==MAX_Y-2)){
							print("\n\n              成功走出");
							return;
						}
					}		
				}
				
        }
		if(key == 72){//up
				if(maze[x-1][y]==0){
					maze[x][y] = 0;
					x = x - 1;
					maze[x][y] = 7;
					printMaze();
					if((x==MAX_X-1)&&(y==MAX_Y-2)){
						print("\n\n              成功走出");
						return;
					}
				}	
        }
		if(key == 75){//left
				if(maze[x][y-1]==0){
					maze[x][y] = 0;
					y = y - 1;
					maze[x][y] = 7;
					printMaze();
					if((x==MAX_X-1)&&(y==MAX_Y-2)){
						print("\n\n              成功走出");
						return;
					}
				}		
        }
	}
}
func gamestart(){
	global flag;
    
	flag = false;
	while(!flag){
		stack=Stack();			//定义一个栈的对象，用来记录行走路线	
		createMaze();
		check(stack);
		_fun("system","cls");
		print("\t*                loading.              *");
		_fun("system","cls");
		print("\t*                loading..             *");
		_fun("system","cls");
		print("\t*                loading...            *");
	}
	printMaze();						//输出当前迷宫的初始状态
	if(!autogame){
		move();
		print("\n\n              输入enter键继续");
		_input();
        return;
	}
	else{
		print("\n\n              输入enter键继续");
		_input();
		stack1=Stack();				
		autoMove(stack1);					//行走中……
	}	
	printMaze();							//输出迷宫的最终状态
	print("\n\n              输入enter键继续...");
	_input();
}

func menu()
{
	global autogame,slow;

	while(1)
    {
		_fun("system","cls");
		print("\t****************************************");
		print("\t*                                      *");
		print("\t*               1.查看路径             *");
		print("\t*                                      *");
		print("\t*               2.自动进行             *");
		print("\t*                                      *");
		print("\t*               3.自行游戏             *");
		print("\t*                                      *");
		print("\t*               4.退出游戏             *");
		print("\t*                                      *");
		print("\t****************************************");
		slow = false;
		key=getchar()-48;
		
		if(key==1){
			autogame = true;
			gamestart();
		}
		else if(key==2){
			autogame = true;
			slow = true;
			gamestart();
		}
		else if(key==3){
			autogame = false;
			gamestart();
		}
		else if(key==4){
			return;
		}
		else
		{
			print("\n\n              错误操作，输入enter返回！");
			_input();
		}
    }
}

main()
{
	menu();
}