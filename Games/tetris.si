/*
A Tetris game
俄罗斯方块游戏
根据C语言源代码改编成Silk语言
原C语言参考地址：https://blog.csdn.net/u011483306/article/details/26390709，感谢原作者。
*/


HEIGHT=24;
LENGTH=40;
SIDE=22;

INIT_MAP=[];
map=[];
TIME_DWELL=1000;
state=0;
_lib=null;

class node(){
	self.x=0;
	self.y=0;
	self.color=0;
}
func judge(bl)
{
	ok=1;
	for(i=0;i<5;i++)
		if(bl[i].x&&map[bl[i].x][bl[i].y])
			ok=0;
    return ok;        
}
func rand()
{
	return _fun("time_rand");
}
func Sleep(val)
{
	_fun("time_sleep",val);
}
//=====>以下函数涉及Windows内部函数，通过调用C/C++语言编写的Dll实现
func gotoxy(x, y){ 
	if(_lib)
		_calllib(_lib,"set_console_pos",x,y);
}
func HideCursor(){ //隐藏光标函数
	if(_lib)
		_calllib(_lib,"hide_console_cursor");
}
func _kbhit()
{
	if(_lib)
    {
		ret=_calllib(_lib,"is_keyboard_hit");
        if(ret)
			return ret[0];
    }
	return 0;
}
func getchar()
{
	if(_lib)
    {
		ret=_calllib(_lib,"get_char");
        if(ret)
        {
			if(ret[0]==224)//如果是方向键，先返回224，然后再取真正的键值
				ret=_calllib(_lib,"get_char");
			return ret[0];
        }
    }
	return 0;
}
func GetKey()
{
	key=null;
	while (_kbhit()){ //当有键按下时
		key = getchar();
	}                

    return key;           
}
//<=====  
 
 
/**************初始化图**************/
func INITMAP()
{
   for(i=0;i<HEIGHT;i++)
	   for(j=0;j<SIDE;j++){
		   if(i==0||i==HEIGHT-1||j==0||j==SIDE-1)map[i][j]=1;
		   else map[i][j]=0;
	   }
}

/********右上方提前显示方块******/
bl=[node(),node(),node(),node(),node()];
func Former_Print_block(n)
{
   for(i=0;i<5;i++){bl[i].x=0;bl[i].y=0;}
   if(n==0){
	   bl[0].x=3;bl[0].y=28;  bl[1].x=3;bl[1].y=30;
	   bl[2].x=4;bl[2].y=30;  bl[3].x=4;bl[3].y=32;
   }
   if(n==1){
	   bl[0].x=3;bl[0].y=32;  bl[1].x=3;bl[1].y=30;
	   bl[2].x=4;bl[2].y=30;  bl[3].x=4;bl[3].y=28;
   }
   if(n==2){
	   bl[0].x=3;bl[0].y=30;  bl[1].x=4;bl[1].y=28;
	   bl[2].x=4;bl[2].y=30;  bl[3].x=4;bl[3].y=32;
   }
   if(n==3){
	   bl[0].x=3;bl[0].y=27;   bl[1].x=3;bl[1].y=29;
	   bl[2].x=3;bl[2].y=31;  bl[3].x=3;bl[3].y=33;
   }
   if(n==4){
	   bl[0].x=3;bl[0].y=29;  bl[1].x=3;bl[1].y=31;
	   bl[2].x=4;bl[2].y=29;  bl[3].x=4;bl[3].y=31;
   }
   if(n==5){
	   bl[0].x=3;bl[0].y=28;  bl[1].x=4;bl[1].y=28;
	   bl[2].x=4;bl[2].y=30;  bl[3].x=4;bl[3].y=32;
   }
   if(n==6){
	   bl[0].x=3;bl[0].y=32;  bl[1].x=4;bl[1].y=28;
	   bl[2].x=4;bl[2].y=30;  bl[3].x=4;bl[3].y=32;
   }
   for(i=0;i<5;i++){
	   gotoxy(bl[i].y,bl[i].x);
	   printf("■");
   }
}

/*********获取不同的方块,出现在中间***********/
block=[node(),node(),node(),node(),node()];
func print_block(n)
{
   for(i=0;i<5;i++){block[i].x=0;block[i].y=0;}
   if(n==0){
	   block[0].x=1;block[0].y=7;   block[1].x=1;block[1].y=9;
	   block[2].x=2;block[2].y=9;  block[3].x=2;block[3].y=11;
   }
   if(n==1){
	   block[0].x=1;block[0].y=11;  block[1].x=1;block[1].y=9;
	   block[2].x=2;block[2].y=9;  block[3].x=2;block[3].y=7;
   }
   if(n==2){
	   block[0].x=1;block[0].y=9;  block[1].x=2;block[1].y=7;
	   block[2].x=2;block[2].y=9;  block[3].x=2;block[3].y=11;
   }
   if(n==3){
	   block[0].x=1;block[0].y=7;   block[1].x=1;block[1].y=9;
	   block[2].x=1;block[2].y=11;  block[3].x=1;block[3].y=13;
   }
   if(n==4){
	   block[0].x=1;block[0].y=9;  block[1].x=1;block[1].y=11;
	   block[2].x=2;block[2].y=9;  block[3].x=2;block[3].y=11;
   }
   if(n==5){
	   block[0].x=1;block[0].y=7;  block[1].x=2;block[1].y=7;
	   block[2].x=2;block[2].y=9;  block[3].x=2;block[3].y=11;
   }
   if(n==6){
	   block[0].x=1;block[0].y=11;  block[1].x=2;block[1].y=7;
	   block[2].x=2;block[2].y=9;  block[3].x=2;block[3].y=11;
   }
   for(i=0;i<5;i++){
	   gotoxy(block[i].y,block[i].x);
	   printf("■");
   }
}


/*************按 上 键 旋转*************/
func Exchange(m)
{
   global state;

   ok=1;
   blo=_copy(block);
   
   if(m==0){
	   if(state==0){
		   blo[0].x+=1;blo[0].y+=2;blo[2].x-=1;blo[2].y+=2;blo[3].x-=2;
		   ok=judge(blo);
		   if(map[blo[0].x][blo[0].y-2])ok=0;
		   if(ok){for(i=0;i<5;i++)block[i]=blo[i];state=1;}
	   }
	   else{
		   blo[0].x-=1;blo[0].y-=2;blo[2].x+=1;blo[2].y-=2;blo[3].x+=2;
		   ok=judge(blo);
		   if(map[blo[1].x-1][blo[1].y])ok=0;
		   if(ok){for(i=0;i<5;i++)block[i]=blo[i];state=0;}
	   }
   }
   else if(m==1){
	   if(state==0){
		   blo[0].x-=1;blo[0].y-=2;blo[2].x-=1;blo[2].y+=2;blo[3].y+=4;
		   ok==judge(blo);
		   if(map[blo[1].x][blo[1].y-2])ok=0;
		   if(ok)for(i=0;i<5;i++){block[i]=blo[i];state=1;}
	   }
	   else {
		   blo[0].x+=1;blo[0].y+=2;blo[2].x+=1;blo[2].y-=2;blo[3].y-=4;
		   ok==judge(blo);
		   if(map[blo[0].x-1][blo[0].y])ok=0;
		   if(ok)for(i=0;i<5;i++){block[i]=blo[i];state=0;}
	   }
   }
   else if(m==2)
   {
	   if(state==0)
	   {
		   blo[0].x+=1;blo[0].y-=2; blo[1].x+=1;blo[1].y+=2;blo[3].x-=1;blo[3].y-=2;
		   ok=judge(blo);
		   if(map[blo[0].x+1][blo[0].y]||map[blo[0].x-1][block[0].y]||map[blo[3].x][blo[3].y+2])ok=0;
		   if(ok)for(i=0;i<5;i++){block[i]=blo[i];state=1;}
	   }
	   else if(state==1)
	   {
		   blo[0].x+=1;blo[0].y+=2; blo[1].x-=1;blo[1].y+=2;blo[3].x+=1;blo[3].y-=2;
		   ok=judge(blo);
		   if(map[blo[0].x][blo[0].y+2]||map[blo[0].x][blo[0].y-2]||map[blo[3].x-1][blo[3].y])ok=0;
		   if(ok)for(i=0;i<5;i++){block[i]=blo[i];state=2;}
	   }
	   else if(state==2)
	   {
		   blo[0].x-=1;blo[0].y+=2; blo[1].x-=1;blo[1].y-=2;blo[3].x+=1;blo[3].y+=2;
		   ok=judge(blo);
		   if(map[blo[0].x+1][blo[0].y]||map[blo[0].x-1][blo[0].y]||map[blo[3].x][blo[3].y-2])ok=0;
		   if(ok)for(i=0;i<5;i++){block[i]=blo[i];state=3;}
	   }
	   else{
		   blo[0].x-=1;blo[0].y-=2; blo[1].x+=1;blo[1].y-=2;blo[3].x-=1;blo[3].y+=2;
		   ok=judge(blo);
		   if(map[blo[0].x][blo[0].y+2]||map[blo[0].x][blo[0].y-2]||map[blo[3].x+1][blo[1].y])ok=0;
		   if(ok)for(i=0;i<5;i++){block[i]=blo[i];state=0;}
	   }
   }
   else if(m==3)
   {
	   if(state==0){
		   blo[0].x+=1;blo[0].y+=2;blo[2].x-=1;blo[2].y-=2;blo[3].x-=2;blo[3].y-=4;
		   ok=judge(blo);
		   if(map[blo[0].x][blo[0].y-2]||map[blo[2].x][blo[2].y+2])ok=0;
		   if(ok)for(i=0;i<5;i++){block[i]=blo[i];state=1;}
	   }
	   else {
		   blo[0].x-=1;blo[0].y-=2;blo[2].x+=1;blo[2].y+=2;blo[3].x+=2;blo[3].y+=4;
		   ok=judge(blo);
		   if(map[blo[0].x+1][blo[0].y]||map[blo[2].x-1][blo[2].y])ok=0;
		   if(ok)for(i=0;i<5;i++){block[i]=blo[i];state=0;}
	   }
   }
   else if(m==5)
   {
	   if(state==0)
	   {
		   blo[0].x+=2;blo[1].x+=1;blo[1].y+=2;blo[3].x-=1;blo[3].y-=2;
		   ok=judge(blo);
		   if(map[blo[3].x][blo[3].y+2])ok=0;
		   if(ok)for(i=0;i<5;i++){block[i]=blo[i];state=1;}
	   }
	   else if(state==1)
	   {
		   blo[0].y+=4;blo[1].x-=1;blo[1].y+=2;blo[3].x+=1;blo[3].y-=2;
		   ok=judge(blo);
		   if(map[blo[3].x-1][blo[3].y])ok=0;
		   if(ok)for(i=0;i<5;i++){block[i]=blo[i];state=2;}
	   }
	   else if(state==2)
	   {
		   blo[0].x-=2;blo[1].x-=1;blo[1].y-=2;blo[3].x+=1;blo[3].y+=2;
		   ok=judge(blo);
		   if(map[blo[3].x][blo[3].y-2])ok=0;
		   if(ok)for(i=0;i<5;i++){block[i]=blo[i];state=3;}
	   }
	   else{
		   blo[0].y-=4;blo[1].x+=1;blo[1].y-=2;blo[3].x-=1;blo[3].y+=2;
		   ok=judge(blo);
		   if(map[blo[3].x+1][blo[3].y])ok=0;
		   if(ok)for(i=0;i<5;i++){block[i]=blo[i];state=0;}
	   }
   }
   else if(m==6)
   {
	   if(state==0)
	   {
		   blo[0].y-=4;blo[1].x+=1;blo[1].y+=2;blo[3].x-=1;blo[3].y-=2;
		   ok=judge(blo);
		   if(map[blo[1].x][blo[1].y-2])ok=0;
		   if(ok){for(i=0;i<5;i++)block[i]=blo[i];state=1;}
	   }
	   else if(state==1)
	   {
		   blo[0].x+=2;blo[1].x-=1;blo[1].y+=2;blo[3].x+=1;blo[3].y-=2;
		   ok=judge(blo);
		   if(map[blo[1].x+1][blo[1].y])ok=0;
		   if(ok){for(i=0;i<5;i++)block[i]=blo[i];state=2;}
	   }
	   else if(state==2)
	   {
		   blo[0].y+=4;blo[1].x-=1;blo[1].y-=2;blo[3].x+=1;blo[3].y+=2;
		   ok=judge(blo);
		   if(map[blo[1].x][blo[1].y+2])ok=0;
		   if(ok){for(i=0;i<5;i++)block[i]=blo[i];state=3;}
	   }
	   else{
		   blo[0].x-=2;blo[1].x+=1;blo[1].y-=2;blo[3].x-=1;blo[3].y+=2;
		   ok=judge(blo);
		   if(map[blo[1].x-1][blo[1].y])ok=0;
		   if(ok){for(i=0;i<5;i++)block[i]=blo[i];state=0;}
	   }
   }
}

/*********清除当前方块**********/
func clear_cube(block)
{
   for(i=0;i<5;i++){
	   if(block[i].x){
	   gotoxy(block[i].y,block[i].x);
	   printf("  ");}
   }
}
/*******打印当前方块*********/
func printt_cube(block)
{
   for(i=0;i<5;i++){
	   if(block[i].x){
		   gotoxy(block[i].y,block[i].x);
		   printf("■");
	   }
   }
}

/**********按键***********/
func Move(m,n){
   if(n==0){//左
	   for(i=0;i<5&&block[i].x;i++)if(block[i].y)block[i].y-=2;
   }
   if(n==1){//右
	   for(i=0;i<5&&block[i].x;i++)if(block[i].y)block[i].y+=2;
   }
   if(n==2)//上
   {
	   Exchange(m);
   }
   if(n==3)//下
   {
	   ok=1;
	   while(ok){
		   for(i=0;i<5;i++)if(block[i].x)
			   if(map[block[i].x+1][block[i].y])ok=0;
		   if(ok)for(i=0;i<5;i++)if(block[i].x)
			   block[i].x+=1;
	   }
   }
}

/******判断是否可以向左移动*****/
func If_Can_Left(block)
{
   ok=1;
   min=22;
   for(i=0;i<5&&block[i].x;i++)if(block[i].y<min)min=block[i].y;
   if(min-2<1)ok=0;
   for(i=0;i<5&&block[i].x;i++)if(block[i].x)
	   if(map[block[i].x][block[i].y-2])ok=0;
   return ok;
}

/******判断是否可以向右移动********/
func If_Can_Right(block)
{
   ok=1;
   max=0;
   for(i=0;i<5&&block[i].x;i++)if(block[i].y>max)max=block[i].y;
   if(max+2>19)ok=0;
   for(i=0;i<5&&block[i].x;i++)if(block[i].x)
	   if(map[block[i].x][block[i].y+2])ok=0;
   return ok;
}

/*********打印图**********/
func print_map()
{
   INIT_MAP.create2d(HEIGHT+1,LENGTH+1,0);
   map.create2d(HEIGHT,SIDE);
	 
   for(i=0;i<HEIGHT;i++)
   {
	   if(i==0||i==23){
		   for(j=0;j<LENGTH;j++)
			{               
				INIT_MAP[i][j]="-";
				printf("%c","-");
			}
	   }
	   else{
			INIT_MAP[i][0]="|";
		   printf("%c","|");
		   for(j=1;j<SIDE-1;j++)
		   {
				INIT_MAP[i][j]=" ";
				printf("%c"," ");
		   }
		   INIT_MAP[i][j]="|";
		   j++;
		   INIT_MAP[i][j]="|";
		   j++;
		   printf("%c%c","|","|");
		   for(;j<LENGTH-1;j++)
		   {
				INIT_MAP[i][j]=" ";
				printf("%c"," ");
		   }
		   INIT_MAP[i][j]="|";
		   printf("%c","|");
	   }
	   print("");
   }
   gotoxy(SIDE+1,10);
   printf("================");
   gotoxy(SIDE+1,11);
   printf("Speed");
   gotoxy(SIDE+1,13);
   printf("================");
   gotoxy(SIDE+1,14);
   printf("Score");
   gotoxy(SIDE+1,16);
   printf("================");
   gotoxy(SIDE+1,19);
   printf("   Written in   ");
   gotoxy(SIDE+1,20);
   printf("   Silk     ");
}

/*******下降一格*******/
func cube_drop(block)
{
   for(i=0;i<5;i++)
	if(block[i].x)
	   block[i].x+=1;
}

/*****到达底部返回1*******/
func is_at_botton(block)
{
   for(i=0;i<5;i++)
	   if(block[i].x&&map[block[i].x+1][block[i].y])
			return 1;
   return 0;
}

/******到达底部map赋值为1*****/
func printmap(block)
{
   for(i=0;i<5;i++){
	   if(block[i].x){
		   map[block[i].x][block[i].y]=1;
		   gotoxy(block[i].y,block[i].x);
		   printf("■");
	   }
   }
}

/******是否可以消去并消去**********/
func Can_It_Cut()
{
   cut=0;
   for(i=HEIGHT-2;i>1;i--){
	   ok=1;
	   for(j=1;j<SIDE-1;j+=2)
		   if(map[i][j]==0){ok=0;break;}
	   if(ok){
		   for(j=i;j>1;j--)for(k=1;k<SIDE-1;k+=2)
			   map[j][k]=map[j-1][k];
		   cut++;i++;
	   }
   }
   for(i=HEIGHT-2;i>1;i--)
	   for(j=1;j<SIDE-1;j+=2)
	   {
		   gotoxy(j,i);
		   if(map[i][j])printf("■");
		   else printf("  ");
	   }
   return cut;
}


/********是否GameOver********/
func is_gameover(num)
{
   ok=1;
   print_block(num);
   for(i=0;i<5;i++)if(block[i].x&&map[block[i].x][block[i].y])ok=0;
   if(!ok){
	   aa="Game Over!!!";
	   for(i=9;i<12;i++)
	   {
		   if(i==10){
			   t=0;
			   for(j=4;j<18;j++){
				   gotoxy(j,i);
				   if(j>=5&&j<17){printf("%c",aa[t]);t++;}
				   else printf(" ");
			   }
		   }
		   else for(j=4;j<18;j++){
				   gotoxy(j,i);
				   printf(" ");
		   }
	   }
	   gotoxy(1,12);printf(" Enter To Continue. ");
	   gotoxy(1,13);printf("    Esc To Escape.  ");
	   gotoxy(1,14);printf("                    ");
   }
   return ok;
}

/*******游戏结束，再来一局，清理屏幕******/
func Clear_map()
{
   for(i=22;i>0;i--)
	   for(j=1;j<SIDE-1;j+=2)
	   {
		   map[i][j]=0;
		   gotoxy(j,i);
		   printf("  ");
	   }
}

main()
{
	filename=_fun("curdir")+"SilkCommonLib64.dll";
	if(_fun("os_platform").find("x64")<0)
		filename=_fun("curdir")+"SilkCommonLib.dll";//win32
	_lib=_loadlib(filename);

	HideCursor();
	print_map();
	INITMAP();

	gameover=1;
	ok=1;//用于判断游戏是否结束
	while(gameover){
	   Score=0;
	   Speed=0;
	   numm=(rand()%7)*(rand()%7)%7;
	   Sleep(TIME_DWELL);
	   while(ok)
	   {
		   gotoxy(SIDE+4+Speed,12);
		   printf("     ");
		   gotoxy(SIDE+4,15);
		   printf("     ");
		   gotoxy(SIDE+4+Speed,12);
		   printf("*");
		   gotoxy(SIDE+4,15);
		   printf("%d",Score);
		   Sleep(200);
		   num=numm;        //第num个方块，初始时为0这个状态
		   numm=(rand()%7)*(rand()%7)%7;               //提前显示的方块
		   clear_cube(bl);
		   Former_Print_block(numm);    //打印提前显示的方块
		   print_block(num);             //打印要落下的方块初始位置
		   state=0;
		   botton=1;//用于判断是否已经落到底部
		   while(botton)
		   {
				clear_cube(block);
				/**********键位响应**********/
				key=GetKey();

				if (key==75 && If_Can_Left(block)) Move(num, 0);//left
				else if (key==77 && If_Can_Right(block)) Move(num, 1);//right
				else if (key==72) Move(num, 2);//up
				else if (key==80) { Move(num, 3); botton = 0; }//down


			   if(!is_at_botton(block)) cube_drop(block);
			   else botton=0;
			   printt_cube(block);//打印当前方块
			   if(!botton) printmap( block);
			   Sleep(100*(4-Score/80));
		   }
		   cut=Can_It_Cut();
		   if(cut){
			   Score+=cut*10;
			   Speed=Score/80;
		   }
		   ok=is_gameover(numm);
	   }
       
	   key=GetKey();
	   if(key==27) gameover=0;//esc
	   else if(key==13) {Clear_map();ok=1;}//enter
	}
    
	_freelib(_lib);
}